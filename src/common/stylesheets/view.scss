html,
body {
	overscroll-behavior: none;
}

// Global scrollbar styles
::-webkit-scrollbar {
	width: 8px !important;
	height: 8px !important;
}

::-webkit-scrollbar-thumb {
	background-color: rgba(0, 0, 0, 0.3);
	border-radius: 4px !important;
	border: 2px solid transparent;
	background-clip: padding-box;
}

::-webkit-scrollbar-thumb:hover {
	background-color: rgba(0, 0, 0, 0.3); // Same as non-hover state
	border: 2px solid transparent;
	background-clip: padding-box;
}

::-webkit-scrollbar-track {
	background-color: transparent !important;
	border-radius: 0;
}

::-webkit-scrollbar-track:hover {
	background-color: transparent !important;
}

* {
	scrollbar-width: thin !important; // Force thin scrollbar in Firefox
	scrollbar-color: rgba(0, 0, 0, 0.3) transparent !important; // Firefox thumb and track color
}

// Ensure scrollbars are positioned at the rightmost edge
.modal-popup,
.view-popup,
.dialog-popup-overlay,
.tooltip-popup-overlay,
.toolbar-popup-overlay {
	& > div,
	& > section,
	& > article,
	& > main,
	& > aside,
	& > nav,
	& > header,
	& > footer,
	& > iframe,
	& > .content,
	& > .inner,
	& > .ai-content,
	& > .translation-content {
		scrollbar-gutter: stable;
		padding-right: 0 !important;
	}
}

// Fix for scrollable content in update notification window
.modal-popup,
.view-popup {
	overflow: hidden; // Ensure the container itself doesn't show scrollbars

	& > div,
	& > section,
	& > article,
	& > main,
	& > aside,
	& > nav,
	& > header,
	& > footer,
	& > iframe {
		&::-webkit-scrollbar {
			position: absolute;
			right: 0;
		}

		&::-webkit-scrollbar-track {
			margin-right: 0;
		}

		&.content,
		&.inner,
		&.ai-content,
		&.translation-content,
		&[class*="content"] {
			margin-right: 0 !important;
			width: 100% !important;
			scrollbar-width: thin; // Firefox scrollbar width
		}

		// Firefox specific scrollbar positioning
		scrollbar-width: thin;
		scrollbar-gutter: stable;
		box-sizing: border-box;
		padding-right: 0 !important;
	}
}

// Specific fix for the update notification window
.dialog-popup-overlay .modal-popup {
	& > div {
		overflow-y: auto;
		scrollbar-gutter: stable;
		padding-right: 0 !important;

		&::-webkit-scrollbar {
			position: absolute;
			right: 0;
		}

		&::-webkit-scrollbar-track {
			margin-right: 0;
		}
	}
}

.pdfViewer .page {
	border-radius: 10px;
}

#viewerContainer {
	// Make scrollbar narrower
	&::-webkit-scrollbar {
		width: 8px !important;
		height: 8px !important;
	}

	&::-webkit-scrollbar-thumb {
		background-color: rgba(0, 0, 0, 0.3);
		border-radius: 4px !important;
		border: 2px solid transparent;
		background-clip: padding-box;
	}

	&::-webkit-scrollbar-thumb:hover {
		background-color: rgba(0, 0, 0, 0.3); // Same as non-hover state
		border: 2px solid transparent;
		background-clip: padding-box;
	}

	&::-webkit-scrollbar-track {
		background-color: transparent !important;
		border-radius: 0;
	}

	&::-webkit-scrollbar-track:hover {
		background-color: transparent !important;
	}

	// Firefox scrollbar
	scrollbar-width: thin !important;
	scrollbar-color: rgba(0, 0, 0, 0.3) transparent !important;
}

// PDF.js Theme Customization
// Override PDF.js CSS variables for custom theming
iframe[src*="viewer.html"] {
	// Wait for iframe to load, then apply custom styles
	&.loaded {
		// This targets the iframe content - note: may not work due to same-origin policy
		// Use Method 2 below for more reliable theming
	}
}

// Method 2: Global PDF.js theme overrides
// These will be applied when PDF.js is loaded in the same origin
:root {
	// Light theme overrides
	--pdf-main-color: #333333;
	--pdf-body-bg-color: #ffffff;
	--pdf-toolbar-bg-color: #f8f9fa;
	--pdf-toolbar-border-color: #dee2e6;
	--pdf-sidebar-bg-color: #f8f9fa;
	--pdf-button-hover-color: #e9ecef;

	// Dark theme overrides
	&[data-theme="dark"] {
		--pdf-main-color: #ffffff;
		--pdf-body-bg-color: #1a1a1a;
		--pdf-toolbar-bg-color: #2d2d2d;
		--pdf-toolbar-border-color: #404040;
		--pdf-sidebar-bg-color: #2d2d2d;
		--pdf-button-hover-color: #404040;
	}
}

// Method 3: Direct iframe content targeting (if same-origin)
// This approach injects styles directly into the PDF.js iframe
.pdf-viewer-container {
	iframe[src*="viewer.html"] {
		// Custom styles for the PDF viewer iframe
		border: none;
		background: var(--pdf-body-bg-color, #ffffff);

		// Post-load styling via JavaScript will be more reliable
		// See Method 4 below for JavaScript implementation
	}
}
